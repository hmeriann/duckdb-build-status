name: Verify Build Artifacts Can Load Extensions
on:
  workflow_call:
    inputs:
      duckdb_arch:
        type: string
      runs_on:
        type: string
      nightly_build:
        type: string
      branch:
        type: string
      curr_date:
        type: string
      duckdb_binary:
        type: string
      run_id:
        type: string
  workflow_dispatch:
    inputs:
      duckdb_arch:
        description: ''
        type: string
      runs_on:
        description: ''
        type: string
      nightly_build:
        description: ''
        type: string
      branch:
        description: ''
        type: string
      curr_date:
        description: ''
        type: string
      duckdb_binary:
        description: ''
        type: string
      run_id:
        description: ''
        type: string

env:
  GH_TOKEN: ${{ github.token }}
  GH_REPO: duckdb/duckdb
  GH_ISSUE_REPO: ${{ github.repository }}

jobs:
  run-tests:
    name: ${{ inputs.branch }} - ${{ inputs.nightly_build }} ${{ inputs.duckdb_arch }} (${{ inputs.runs_on }})
    continue-on-error: true
    runs-on: ${{ inputs.runs_on }}
    outputs:
        RUN_ID: ${{ steps.get-run-id.outputs.RUN_ID }}
    steps:
      - run: echo ${{ inputs.branch }} ${{ inputs.nightly_build }} ${{ inputs.runs_on }} ${{ inputs.duckdb_arch }} 
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.11'

      - name: Install Python dependencies
        run: pip install duckdb docker
            
      - name: Checkout repo with the scripts
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/duckdb-build-status

      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
            sparse-checkout: |
                .github/config
            path: ext
            repository: 'duckdb/duckdb'
            # repository: ${{ env.GH_REPO }}
    
      - name: Get Run Id
        id: get-run-id
        shell: bash
        run: |
            if ${{ inputs.run_id == '0' }}; then
                RUN_ID=$(gh run list --workflow 'InvokeCI.yml' --repo 'duckdb/duckdb' --branch ${{ inputs.branch }} --json databaseId,status,headBranch,headSha -q '.[0].databaseId')
                # RUN_ID=$(gh run list --workflow 'InvokeCI.yml' --repo ${{ env.GH_REPO }} --branch ${{ inputs.branch }} --json databaseId,status,headBranch,headSha -q '.[0].databaseId')
            else
                RUN_ID=${{inputs.run_id}}
            fi
            echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT
    
      - name: Verify ${{ inputs.nightly_build }} ${{ inputs.duckdb_arch }} build version and Test extensions
        id: verify-build
        shell: bash
        run: |
            if [[ ${{ inputs.nightly_build }} != 'python' ]]; then
              echo "Downloading duckdb-binaries-${{ inputs.duckdb_binary }} artifact from ${{ steps.get-run-id.outputs.RUN_ID }}..."
              if gh run download ${{ steps.get-run-id.outputs.RUN_ID }} --repo ${{ env.GH_REPO }} -n duckdb-binaries-${{ inputs.duckdb_binary }}; then
                # echo "Artifact duckdb-binaries-${{ inputs.duckdb_binary }} is successfuly downloaded."
                if [[ ${{ inputs.nightly_build }} == 'osx' ]]; then
                  unzip duckdb_cli-*.zip -d duckdb_path
                else
                  if [[ ${{ inputs.branch }} != 'main' && ${{ inputs.nightly_build }} == 'linux' ]]; then
                    unzip duckdb_cli-${{ inputs.nightly_build }}-${{ inputs.duckdb_arch }}.zip -d duckdb_path
                  else
                    unzip duckdb_cli-${{ inputs.duckdb_binary }}.zip -d duckdb_path
                  fi
                fi
              fi
            fi
            echo "Verifying version and testing extensions..."
            python scripts/verify_and_test.py \
                --nightly_build ${{ inputs.nightly_build }} \
                --architecture ${{ inputs.duckdb_arch }} \
                --run_id ${{ steps.get-run-id.outputs.RUN_ID }} \
                --runs_on ${{ inputs.runs_on }} \
                --branch ${{ inputs.branch }}

      - name: Upload actions for extensions
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.branch }}_ext_${{ inputs.nightly_build }}_${{ inputs.duckdb_arch }}
          path: |
            ${{ inputs.branch }}*${{ inputs.duckdb_arch }}*.csv
          if-no-files-found: ignore